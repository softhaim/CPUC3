#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

int check_alpha(char* word, char n) //알파벳이 있는지 확인하는 함수
{
   for (int i = 0; word[i] != '\0'; i++)
   {
      if (word[i] == n)
         return 1;
   }
   return 0;
}

void picture(int count)
{
   switch (count)
   {
   case 7:
      printf("  ____\n");
      printf(" |    |\n");
      printf(" |\n");
      printf(" |\n");
      printf(" |\n");
      printf(" |\n");
      printf(" |\n");
      printf(" |____________\n");
      break;
   case 6:
      printf("  ____\n");
      printf(" |    |\n");
      printf(" |   n_n\n");
      printf(" |  (•ω•)\n");
      printf(" |\n");
      printf(" |\n");
      printf(" |\n");
      printf(" |____________\n");
      break;
   case 5:
      printf("  ____\n");
      printf(" |    |\n");
      printf(" |   n_n\n");
      printf(" |  (•ω•)\n");
      printf(" |    |  \n");
      printf(" |     \n");
      printf(" |      \n");
      printf(" |____________\n");
      break;
   case 4:
      printf("  ____\n");
      printf(" |    |\n");
      printf(" |   n_n\n");
      printf(" |  (•ω•)\n");
      printf(" |    |  \n");
      printf(" |    |\n");
      printf(" |   \n");
      printf(" |____________\n");
      break;
   case 3:
      printf("  ____\n");
      printf(" |    |\n");
      printf(" |   n_n\n");
      printf(" |  (•ω•)\n");
      printf(" |  / |  \n");
      printf(" |    |\n");
      printf(" |   \n");
      printf(" |____________\n");
      break;
   case 2:
      printf("  ____\n");
      printf(" |    |\n");
      printf(" |   n_n\n");
      printf(" |  (•ω•)\n");
      printf(" |  / | >\n");
      printf(" |    |\n");
      printf(" |   \n");
      printf(" |____________\n");
      break;
   case 1:
      printf("  ____\n");
      printf(" |    |\n");
      printf(" |   n_n\n");
      printf(" |  (•ω•)\n");
      printf(" |  / | >\n");
      printf(" |    |\n");
      printf(" |   /  \n");
      printf(" |____________\n");
      break;
   case 0:
      printf("  ____\n");
      printf(" |    |\n");
      printf(" |   n_n\n");
      printf(" |  (TωT)\n");
      printf(" |  / | >\n");
      printf(" |    |\n");
      printf(" |   / >\n");
      printf(" |____________\n");
      break;
   }

}

int main(void)
{
   char input[100]; // Buffer to store user input
   char n; //내가 입력하는 단어 변수 
   char dic[][20] = { "apple", "ant", "culture", "calendar", "danger", "elephant", "finish", "garden", "green", "happy", "python", "romance", "symbol", "unity", "umbrella" };
   char* word; // dic에서 선택한 단어
   char answer[20] = { 0 };
   int dnum = sizeof(dic) / (sizeof(char) * 20); //dic에서의 단어의 개수
   int wnum; //선택된 단어에서 글자의 개수
   int index; // 랜덤으로 선택한 인덱스 번호 
   int count = 7; // 남은 기회 변수
   int check_num = 0; //함수 사용 후 나오는 변수 

   srand(time(NULL));
   index = rand() % dnum;
   word = dic[index];
   wnum = strlen(word);
   memset(answer, '_', wnum); // Initialize answer with underscores
   answer[wnum] = '\0';

   while (1)
   {
      picture(count);
      printf("%s\n\n남은기회 : %d\n알파벳을 입력하세요 : ", answer, count);
      fgets(input, sizeof(input), stdin); // Use fgets to read the string including spaces
      n = input[0]; // Take only the first character

      // Check if the input is a letter and if it is not, prompt the user again
      if (!isalpha(n) || input[1] != '\n') {
         printf("잘못된 입력입니다. 알파벳 한 글자만 입력해주세요.\n");
         continue;
      }

      // Convert to lowercase to maintain consistency
      n = tolower(n);

      check_num = check_alpha(word, n);

      if (check_num == 1)
      {
         for (int j = 0; j < wnum; j++)
         {
            if (word[j] == n)
               answer[j] = n;
         }
      }
      else
      {
         printf("\n틀림\n");
         count -= 1;
      }

      if (strcmp(word, answer) == 0)
      {
         printf("\n성공\n단어 : %s", word);
         break;
      }

      if (count == 0)
      {
         picture(0);
         printf("\n실패\n단어 : %s", word);
         break;
      }
   }

   return 0;
}
